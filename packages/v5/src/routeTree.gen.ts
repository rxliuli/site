/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectIndexImport } from './routes/project.index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as WebstorePrivacyImport } from './routes/webstore.privacy'
import { Route as ProjectSlugImport } from './routes/project.$slug'
import { Route as PingPrivacyImport } from './routes/ping.privacy'
import { Route as BlogSlugImport } from './routes/blog.$slug'
import { Route as DemoStartServerFuncsImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestImport } from './routes/demo.start.api-request'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectIndexRoute = ProjectIndexImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any)

const WebstorePrivacyRoute = WebstorePrivacyImport.update({
  id: '/webstore/privacy',
  path: '/webstore/privacy',
  getParentRoute: () => rootRoute,
} as any)

const ProjectSlugRoute = ProjectSlugImport.update({
  id: '/project/$slug',
  path: '/project/$slug',
  getParentRoute: () => rootRoute,
} as any)

const PingPrivacyRoute = PingPrivacyImport.update({
  id: '/ping/privacy',
  path: '/ping/privacy',
  getParentRoute: () => rootRoute,
} as any)

const BlogSlugRoute = BlogSlugImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DemoStartServerFuncsRoute = DemoStartServerFuncsImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRoute,
} as any)

const DemoStartApiRequestRoute = DemoStartApiRequestImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugImport
      parentRoute: typeof rootRoute
    }
    '/ping/privacy': {
      id: '/ping/privacy'
      path: '/ping/privacy'
      fullPath: '/ping/privacy'
      preLoaderRoute: typeof PingPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/project/$slug': {
      id: '/project/$slug'
      path: '/project/$slug'
      fullPath: '/project/$slug'
      preLoaderRoute: typeof ProjectSlugImport
      parentRoute: typeof rootRoute
    }
    '/webstore/privacy': {
      id: '/webstore/privacy'
      path: '/webstore/privacy'
      fullPath: '/webstore/privacy'
      preLoaderRoute: typeof WebstorePrivacyImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof rootRoute
    }
    '/project/': {
      id: '/project/'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectIndexImport
      parentRoute: typeof rootRoute
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestImport
      parentRoute: typeof rootRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/ping/privacy': typeof PingPrivacyRoute
  '/project/$slug': typeof ProjectSlugRoute
  '/webstore/privacy': typeof WebstorePrivacyRoute
  '/blog': typeof BlogIndexRoute
  '/project': typeof ProjectIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/ping/privacy': typeof PingPrivacyRoute
  '/project/$slug': typeof ProjectSlugRoute
  '/webstore/privacy': typeof WebstorePrivacyRoute
  '/blog': typeof BlogIndexRoute
  '/project': typeof ProjectIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/ping/privacy': typeof PingPrivacyRoute
  '/project/$slug': typeof ProjectSlugRoute
  '/webstore/privacy': typeof WebstorePrivacyRoute
  '/blog/': typeof BlogIndexRoute
  '/project/': typeof ProjectIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blog/$slug'
    | '/ping/privacy'
    | '/project/$slug'
    | '/webstore/privacy'
    | '/blog'
    | '/project'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blog/$slug'
    | '/ping/privacy'
    | '/project/$slug'
    | '/webstore/privacy'
    | '/blog'
    | '/project'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blog/$slug'
    | '/ping/privacy'
    | '/project/$slug'
    | '/webstore/privacy'
    | '/blog/'
    | '/project/'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogSlugRoute: typeof BlogSlugRoute
  PingPrivacyRoute: typeof PingPrivacyRoute
  ProjectSlugRoute: typeof ProjectSlugRoute
  WebstorePrivacyRoute: typeof WebstorePrivacyRoute
  BlogIndexRoute: typeof BlogIndexRoute
  ProjectIndexRoute: typeof ProjectIndexRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogSlugRoute: BlogSlugRoute,
  PingPrivacyRoute: PingPrivacyRoute,
  ProjectSlugRoute: ProjectSlugRoute,
  WebstorePrivacyRoute: WebstorePrivacyRoute,
  BlogIndexRoute: BlogIndexRoute,
  ProjectIndexRoute: ProjectIndexRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/blog/$slug",
        "/ping/privacy",
        "/project/$slug",
        "/webstore/privacy",
        "/blog/",
        "/project/",
        "/demo/start/api-request",
        "/demo/start/server-funcs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/blog/$slug": {
      "filePath": "blog.$slug.tsx"
    },
    "/ping/privacy": {
      "filePath": "ping.privacy.tsx"
    },
    "/project/$slug": {
      "filePath": "project.$slug.tsx"
    },
    "/webstore/privacy": {
      "filePath": "webstore.privacy.tsx"
    },
    "/blog/": {
      "filePath": "blog.index.tsx"
    },
    "/project/": {
      "filePath": "project.index.tsx"
    },
    "/demo/start/api-request": {
      "filePath": "demo.start.api-request.tsx"
    },
    "/demo/start/server-funcs": {
      "filePath": "demo.start.server-funcs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
